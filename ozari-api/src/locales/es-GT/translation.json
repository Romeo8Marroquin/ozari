{
  "api": {
    "cors": {
      "originUndefined": "El origen no está definido.",
      "originInvalid": "El origen no es válido.",
      "logs": {
        "portError": "El puerto <{{-port}}> no está definido.",
        "originNotDefined": "El origen <{{-origin}}> no está definido.",
        "originBlocked": "El origen <{{-origin}}> fue bloqueado al no ser reconocido."
      }
    },
    "database": {
      "connected": "Servidor de base de datos conectado exitosamente",
      "logs": {
        "dbDisconnection": "Desconectando la base de datos.",

        "databaseConnectionError": "Error al conectar la base de datos: {{-error}}.",
        "databaseShutdownError": "Error al cerrar la base de datos: {{-error}}."
      }
    },
    "server": {
      "logs": {
        "serverRunning": "Servidor backend ejecutándose en <{{-host}}:{{-port}}>.",
        "serverClosed": "Servidor backend cerrado exitosamente.",
        "initRequest": "Iniciando la petición",

        "hostError": "No se encontró el host <{{-host}}>.",
        "appHostError": "No se encontró el host del frontend <{{-host}}>.",
        "portError": "No se encontró el puerto <{{-port}}>."
      }
    }
  },
  "user": {
    "createUser": {
      "userCreated": "Usuario creado exitosamente.",

      "genericError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
      "validators": {
        "invalidFullName": "El nombre es requerido y debe ser válido",
        "invalidEmail": "El correo electrónico es requerido y debe ser válido.",
        "invalidPassword": "La contraseña debe tener al menos 10 caracteres, incluyendo letras, símbolos y números.",
        "passwordsDoNotMatch": "Las contraseñas no coinciden.",
        "termsNotAccepted": "Debes aceptar los términos y condiciones.",
        "logs": {
          "invalidFullName": "El nombre <{{-fullName}}> no es válido.",
          "invalidEmail": "El correo electrónico <{{-email}}> no es válido.",
          "invalidPassword": "La contraseña <{{-password}}> no es válida.",
          "passwordsDoNotMatch": "Las contraseñas <{{-password}}> y <{{-confirmPassword}}> no coinciden.",
          "termsNotAccepted": "Los términos y condiciones no han sido aceptados."
        }
      },
      "logs": {
        "userCreated": "Usuario creado exitosamente con el correo <{{-email}}> y el nombre <{{-fullName}}>.",
        "userAlreadyExists": "El usuario con el correo <{{-email}}> ya existe.",
        "internalServerError": "Error al crear usuario: {{-error}}."
      }
    },
    "signInUser": {
      "userAuthenticated": "Usuario autenticado exitosamente.",

      "genericError": "Credenciales inválidas",
      "internalServerError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
      "validators": {
        "deviceUuidMissing": "El identificador del dispositivo es requerido y debe ser válido.",
        "invalidEmail": "El correo electrónico es requerido y debe ser válido.",
        "invalidPassword": "La contraseña es requerida y debe ser válida.",
        "logs": {
          "deviceUuidMissing": "El UUID del dispositivo <{{-uuid}}> no es válido.",
          "invalidEmail": "El correo electrónico <{{-email}}> no es válido.",
          "invalidPassword": "La contraseña <{{-password}}> no es válida."
        }
      },
      "logs": {
        "userAuthenticated": "Usuario con el correo <{{-email}}> y el id <{{-userId}}> autenticado exitosamente.",

        "userNotFound": "El usuario con el correo <{{-email}}> no fue encontrado.",
        "invalidCredentials": "La contraseña del usuario id <{{-userId}}> y email <{{-email}}> es inválida.",
        "invalidPassword": "La contraseña es inválida.",
        "internalServerError": "Error al iniciar sesión: {{-error}}."
      }
    },
    "refreshToken": {
      "tokenRefreshed": "Sesión actualizada exitosamente.",

      "genericError": "Acceso denegado.",
      "logs": {
        "tokenRefreshed": "Sesión del usuario id <{{-userId}}> y rol <{{-userRole}}> actualizada exitosamente.",

        "invalidTokenType": "Tipo de token inválido, se esperaba <{{-expected}}> pero se recibió <{{-received}}>.",
        "noRefreshToken": "No se encontró el token de actualización <{{-refreshToken}}> en la petición.",
        "internalServerError": "Error al refrescar el token: {{-error}}."
      }
    },
    "signOutUser": {
      "userSignedOut": "Sesión finalizada exitosamente.",

      "genericError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
      "logs": {
        "userSignedOut": "Sesión del usuario id <{{-userId}}> y rol <{{-userRole}}> finalizada exitosamente, all devices <{{-allDevices}}>.",

        "internalServerError": "Error al cerrar sesión: {{-error}}."
      }
    },
    "getAllUsers": {
      "usersFetched": "Usuarios obtenidos exitosamente.",

      "genericError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
      "logs": {
        "usersFetched": "Usuarios obtenidos exitosamente, total de usuarios <{{-count}}>.",

        "internalServerError": "Error al obtener usuarios: {{-error}}."
      }
    }
  },
  "middlewares": {
    "disabled": {
      "defaultMessage": "Esta ruta está deshabilitada temporalmente.",
      "logs": {
        "defaultMessage": "[middleware] Este endpoint <{{-method}} {{-url}}> está deshabilitado temporalmente."
      }
    },
    "auth": {
      "defaultMessage": "Acceso denegado.",
      "logs": {
        "jwtMismatch": "[middleware] El jti <{{-received}}> del token recibido no coincide con el jti esperado <{{-expected}}> de sesión activa.",
        "successAuth": "[middleware] Usuario con el id <{{-userId}}> y rol <{{-role}}> autenticado exitosamente.",
        "jwtRegisterError": "[middleware] Se encontraron <{{-count}}> tokens activos en base de datos para el token jti <{{-jti}}>.",
        "jwtSecretMissing": "[middleware] JWT Secret no definido.",
        "jwtRefreshSecretMissing": "[middleware] JWT Refresh Secret no definido.",
        "invalidTokenType": "[middleware] Tipo de token inválido, se esperaba <{{-expected}}> pero se recibió <{{-received}}>.",
        "unauthorized": "[middleware] No autorizado, token <{{-token}}> no proporcionado o inválido.",
        "internalServerError": "[middleware] Error al validar el token en el middleware de autenticación: {{-error}}."
      }
    },
    "isGranted": {
      "defaultMessage": "Acceso denegado.",
      "logs": {
        "successAuth": "[middleware] Usuario con el id <{{-userId}}> y rol <{{-role}}> autenticado exitosamente.",
        "unauthorized": "[middleware] Usuario <{{-user}}> no autorizado o inválido.",
        "forbidden": "[middleware] Acceso denegado, el usuario con id <{{-userId}}> no tiene acceso al recurso <{{-method}} {{-url}}> con el rol <{{-role}}>.",
        "internalServerError": "[middleware] Error al validar el token en el middleware de permisos: {{-error}}."
      }
    }
  },
  "products": {
    "getAllProducts": {
      "productsFetched": "Productos obtenidos exitosamente.",

      "errorFetchingProducts": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
      "logs": {
        "productsFetched": "Productos obtenidos exitosamente, total de productos <{{-count}}>.",

        "errorFetchingProducts": "Error al obtener productos: {{-error}}."
      }
    },
    "createProduct": {
      "productCreated": "Producto creado exitosamente.",

      "errorCreatingProduct": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
      "validators": {
        "invalidBusinessTypeId": "El tipo de negocio es requerido y debe ser válido.",
        "invalidCategoryId": "La categoría es requerida y debe ser válida.",
        "invalidCurrencyId": "La moneda es requerida y debe ser válida.",
        "invalidDescription": "La descripción debe ser válida.",
        "invalidImageUrl": "La imagen debe ser válida.",
        "invalidName": "El nombre es requerido y debe ser válido.",
        "invalidDetailTypeId": "El tipo de un detalle del producto no es válido.",
        "invalidDetail": "El nombre de un detalle del producto no es válido.",
        "invalidQuantity": "La cantidad es requerida y debe ser válida.",
        "invalidRentPrice": "El precio de renta debe ser válido.",
        "invalidSellPrice": "El precio de venta debe ser válido.",
        "invalidRentAndSellPrice": "El precio de renta y el precio de venta no pueden ser vacíos al mismo tiempo.",
        "validationError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
        "logs": {
          "invalidBusinessTypeId": "El id del tipo de negocio <{{-businessTypeId}}> no es válido.",
          "invalidCategoryId": "El id de la categoría <{{-categoryId}}> no es válido.",
          "invalidCurrencyId": "El id de la moneda <{{-currencyId}}> no es válido.",
          "invalidDescription": "La descripción <{{-description}}> no es válida.",
          "invalidImageUrl": "La imagen <{{-imageUrl}}> no es válida.",
          "invalidName": "El nombre <{{-name}}> no es válido.",
          "invalidDetailTypeId": "El id del tipo de detalle <{{-detailTypeId}}> del producto no es válido.",
          "invalidDetail": "El nombre del detalle <{{-detail}}> del producto no es válido.",
          "invalidQuantity": "La cantidad <{{-quantity}}> no es válida.",
          "invalidRentPrice": "El precio de renta <{{-rentPrice}}> no es válido.",
          "invalidSellPrice": "El precio de venta <{{-sellPrice}}> no es válido.",
          "invalidRentAndSellPrice": "El precio de renta <{{-rentPrice}}> y el precio de venta <{{-sellPrice}}> no pueden ser vacíos al mismo tiempo.",
          "validationError": "Error de validación: {{-error}}."
        }
      },
      "logs": {
        "productCreated": "Producto id <{{-id}}> creado exitosamente.",

        "errorCreatingProduct": "Error al crear producto: {{-error}}."
      }
    },
    "updateProduct": {
      "productUpdated": "Producto actualizado exitosamente.",

      "genericError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
      "validators": {
        "invalidId": "El id del producto es requerido y debe ser válido.",
        "invalidDetailId": "El id de un detalle del producto no es válido.",
        "validationError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
        "logs": {
          "invalidId": "El id del producto <{{-id}}> no es válido.",
          "invalidDetailId": "El id del detalle <{{-detailId}}> del producto no es válido.",
          "validationError": "Error de validación: {{-error}}."
        }
      },
      "logs": {
        "productUpdated": "Producto id <{{-id}}> actualizado exitosamente.",

        "genericError": "Error al actualizar producto: {{-error}}."
      }
    },
    "deleteProduct": {
      "productDeleted": "Producto eliminado exitosamente.",

      "genericError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
      "validators": {
        "invalidId": "El id del producto es requerido y debe ser válido.",
        "validationError": "Ha ocurrido un error, por favor intente de nuevo más tarde.",
        "logs": {
          "invalidId": "El id del producto <{{-id}}> no es válido.",
          "validationError": "Error de validación: {{-error}}."
        }
      },
      "logs": {
        "productDeleted": "Producto id <{{-id}}> eliminado exitosamente.",

        "genericError": "Error al eliminar producto: {{-error}}."
      }
    }
  }
}
