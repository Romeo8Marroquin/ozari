generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt       @map("updated_at")
  createdAt   DateTime  @default(now())  @map("created_at")
  
  users       User[]
  
  @@map("user_roles")
}

model User {
  id            Int       @id @default(autoincrement())
  fullNameKms   String    @map("full_name_kms")
  emailSha      String    @unique @map("email_sha")
  emailKms      String    @map("email_kms")
  roleId        Int       @map("role_id")
  passwordSha   String    @map("password_sha")
  passwordKms   String    @map("password_kms")
  termsAccepted Boolean   @default(false) @map("terms_accepted")
  isActive      Boolean   @default(true) @map("is_active")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  role          UserRole  @relation(fields: [roleId], references: [id])
  jwtSessions   JwtSession[]
  blacklists    Blacklist[]
  userPhones    UserPhone[]
  addresses     Address[]
  services      Service[]
  
  @@map("users")
}

model TokenType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  jwtSessions JwtSession[]

  @@map("token_types")
}

model JwtSession {
  id          Int       @id @default(autoincrement())
  jti         String
  deviceUuid  String    @map("device_uuid")
  userId      Int       @map("user_id")
  tokenTypeId Int       @map("token_type_id")
  issuedAt    DateTime  @map("issued_at")
  expiresAt   DateTime  @map("expires_at")
  isActive    Boolean   @default(true) @map("is_active")

  user        User      @relation(fields: [userId], references: [id])
  tokenType   TokenType @relation(fields: [tokenTypeId], references: [id])

  @@map("jwt_sessions")
}

model BlacklistType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  blacklists  Blacklist[]
  
  @@map("blacklist_types")
}

model Blacklist {
  id              Int           @id @default(autoincrement())
  userId          Int           @map("user_id")
  blacklistTypeId Int           @map("blacklist_type_id")
  reason          String
  isActive        Boolean       @default(true) @map("is_active")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  
  user            User          @relation(fields: [userId], references: [id])
  blacklistType   BlacklistType @relation(fields: [blacklistTypeId], references: [id])
  
  @@map("blacklist")
}

model UserPhoneType {
  id          Int       @id @default(autoincrement())
  type        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  userPhones  UserPhone[]
  
  @@map("user_phone_types")
}

model UserPhone {
  id              Int           @id @default(autoincrement())
  userId          Int           @map("user_id")
  userPhoneTypeId Int           @map("user_phone_type_id")
  phoneNumberKms  String        @map("phone_number_kms")
  isPrincipal     Boolean       @map("is_principal")
  isActive        Boolean       @default(true) @map("is_active")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  
  user            User          @relation(fields: [userId], references: [id])
  phoneType       UserPhoneType @relation(fields: [userPhoneTypeId], references: [id])
  services        Service[]
  
  @@map("user_phones")
}

model Currency {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  symbol       String
  iso4217Code  String    @map("iso_4217_code")
  isActive     Boolean   @default(true) @map("is_active")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  
  products         Product[]
  services         Service[]
  serviceDetails   ServiceDetail[]
  serviceExtras    ServiceExtra[]
  
  @@map("currencies")
}

model ProductBusinessType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  products    Product[]
  
  @@map("product_business_type")
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  products    Product[]
  
  @@map("product_category")
}

model Product {
  id                    Int                 @id @default(autoincrement())
  name                  String
  description           String?
  imageUrl              String?             @map("image_url")
  productBusinessTypeId Int                 @map("product_business_type_id")
  productCategoryId     Int                 @map("product_category_id")
  rentPrice             Decimal?            @db.Decimal(15,2)
  sellPrice             Decimal?            @db.Decimal(15,2)
  currencyId            Int                 @map("currency_id")
  quantity              Int
  isActive              Boolean             @default(true) @map("is_active")
  updatedAt             DateTime?           @updatedAt @map("updated_at")
  createdAt             DateTime            @default(now()) @map("created_at")
  
  businessType          ProductBusinessType @relation(fields: [productBusinessTypeId], references: [id])
  category              ProductCategory     @relation(fields: [productCategoryId], references: [id])
  currency              Currency            @relation(fields: [currencyId], references: [id])
  productDetails        ProductDetail[]
  serviceDetails        ServiceDetail[]
  
  @@map("products")
}

model ProductDetailType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  productDetails  ProductDetail[]
  
  @@map("product_detail_types")
}

model ProductDetail {
  id                  Int               @id @default(autoincrement())
  productId           Int               @map("product_id")
  productDetailTypeId Int               @map("product_detail_type_id")
  detail              String
  isActive            Boolean           @default(true) @map("is_active")
  updatedAt           DateTime?         @updatedAt @map("updated_at")
  createdAt           DateTime          @default(now()) @map("created_at")
  
  product             Product           @relation(fields: [productId], references: [id])
  detailType          ProductDetailType @relation(fields: [productDetailTypeId], references: [id])
  
  @@map("product_details")
}

model Country {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  departments CountryDepartment[]
  
  @@map("countries")
}

model CountryDepartment {
  id          Int       @id @default(autoincrement())
  name        String
  countryId   Int       @map("country_id")
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  country     Country   @relation(fields: [countryId], references: [id])
  municipalities Municipality[]
  
  @@map("departments")
}

model Municipality {
  id             Int               @id @default(autoincrement())
  name           String
  departmentId   Int               @map("department_id")
  description    String?
  isActive       Boolean           @default(true) @map("is_active")
  updatedAt      DateTime?         @updatedAt @map("updated_at")
  createdAt      DateTime          @default(now()) @map("created_at")
  
  department     CountryDepartment @relation(fields: [departmentId], references: [id])
  zones          Zone[]
  
  @@map("municipalities")
}

model Zone {
  id             Int          @id @default(autoincrement())
  name           String
  municipalityId Int          @map("municipality_id")
  description    String?
  isActive       Boolean      @default(true) @map("is_active")
  updatedAt      DateTime?    @updatedAt @map("updated_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  
  municipality   Municipality @relation(fields: [municipalityId], references: [id])
  addresses      Address[]
  
  @@map("zones")
}

model Address {
  id                  Int       @id @default(autoincrement())
  userId              Int       @map("user_id")
  zoneId              Int       @map("zone_id")
  addressKms          String    @map("address_kms")
  coordsKms           String?   @map("coords_kms")
  instructionsKms     String?   @map("instructions_kms")
  domicilePrice       Decimal?  @db.Decimal(15,2) @map("domicile_price")
  deliveryTimeMinutes Int?      @map("delivery_time_minutes")
  isActive            Boolean   @default(true) @map("is_active")
  updatedAt           DateTime? @updatedAt @map("updated_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  
  user                User      @relation(fields: [userId], references: [id])
  zone                Zone      @relation(fields: [zoneId], references: [id])
  services            Service[]
  
  @@map("addresses")
}

model ServiceStatus {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  services    Service[]
  
  @@map("service_status")
}

model PaymentStatus {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  services    Service[]
  
  @@map("payment_status")
}

model Service {
  id               Int           @id @default(autoincrement())
  userId           Int           @map("user_id")
  deliveryNameKms  String        @map("delivery_name_kms")
  addressId        Int           @map("address_id")
  userPhoneId      Int           @map("user_phone_id")
  description      String?
  serviceStart     DateTime      @map("service_start")
  serviceEnd       DateTime      @map("service_end")
  totalAmount      Decimal       @db.Decimal(15,2) @map("total_amount")
  currencyId       Int           @map("currency_id")
  serviceStatusId  Int           @map("service_status_id")
  paymentStatusId  Int           @map("payment_status_id")
  comment          String?
  invoiceNumberKms String?       @map("invoice_number_kms")
  isActive         Boolean       @default(true) @map("is_active")
  updatedAt        DateTime?     @updatedAt @map("updated_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  
  user             User          @relation(fields: [userId], references: [id])
  address          Address       @relation(fields: [addressId], references: [id])
  userPhone        UserPhone     @relation(fields: [userPhoneId], references: [id])
  currency         Currency      @relation(fields: [currencyId], references: [id])
  serviceStatus    ServiceStatus @relation(fields: [serviceStatusId], references: [id])
  paymentStatus    PaymentStatus @relation(fields: [paymentStatusId], references: [id])
  serviceDetails   ServiceDetail[]
  serviceExtras    ServiceExtra[]
  
  @@map("services")
}

model ServiceDetail {
  id           Int       @id @default(autoincrement())
  serviceId    Int       @map("service_id")
  productId    Int       @map("product_id")
  quantity     Int
  unitaryPrice Decimal   @db.Decimal(15,2) @map("unitary_price")
  parcialPrice Decimal   @db.Decimal(15,2) @map("parcial_price")
  currencyId   Int       @map("currency_id")
  isActive     Boolean   @default(true) @map("is_active")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  
  service      Service   @relation(fields: [serviceId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
  currency     Currency  @relation(fields: [currencyId], references: [id])
  
  @@map("service_details")
}

model ServiceExtra {
  id           Int       @id @default(autoincrement())
  serviceId    Int       @map("service_id")
  name         String
  description  String?
  quantity     Int?
  unitaryPrice Decimal?  @db.Decimal(15,2) @map("unitary_price")
  parcialPrice Decimal?  @db.Decimal(15,2) @map("parcial_price")
  currencyId   Int?      @map("currency_id")
  isActive     Boolean   @default(true) @map("is_active")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  
  service      Service   @relation(fields: [serviceId], references: [id])
  currency     Currency? @relation(fields: [currencyId], references: [id])
  
  @@map("service_extras")
}
